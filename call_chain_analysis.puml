@startuml 调用链分析
!theme plain
skinparam responseMessageBelowArrow true
skinparam maxMessageSize 150

title Playbook执行调用链分析

participant "CLI用户" as User
participant "playbook.py" as CLI
participant "PlaybookCore" as Core
participant "ScenarioRunner" as Runner
participant "ResultCollector" as Collector
participant "ResultTransporter" as Transporter
participant "ResultAnalyzer" as Analyzer
participant "ResultReporter" as Reporter

== run --all 执行链 ==
User -> CLI: ./playbook.py run --all
CLI -> CLI: run(all=True)
CLI -> Core: run_full_test_suite()
activate Core
Core -> Core: 1. 系统健康检查
Core -> Core: 2. 验证测试环境
Core -> Runner: run_all_scenarios()
activate Runner
loop 遍历所有启用场景
    Runner -> Runner: run_scenario(scenario_name)
    Runner -> Runner: _execute_scenario_steps()
    note right: 执行8个步骤:\n0. 准备环境\n1. 验证配置\n2. 构建依赖\n3. 部署服务\n4. 健康检查\n5. 执行测试\n6. 收集结果\n7. 停止服务\n8. 清理环境
    Runner -> Runner: **第6步: _collect_distributed_results()**
    note over Runner: 进入结果收集流程
end
Runner --> Core: Dict[str, ScenarioResult]
deactivate Runner
Core -> Core: 4. 收集和汇总结果
Core --> CLI: ExecutionResult
deactivate Core
CLI --> User: 显示执行摘要

== run base_test/memory_opt 执行链 ==
User -> CLI: ./playbook.py run base_test
CLI -> CLI: run(scenario_name="base_test")
CLI -> Core: run_single_scenario("base_test")
activate Core
Core -> Runner: run_scenario("base_test")
activate Runner
Runner -> Runner: _execute_scenario_steps()
Runner -> Runner: **第6步: _collect_distributed_results()**
note over Runner: 进入结果收集流程
Runner --> Core: ScenarioResult
deactivate Runner
Core --> CLI: ExecutionResult
deactivate Core
CLI --> User: 显示场景结果

@enduml

@startuml 第6步结果收集详细调用栈
!theme plain
skinparam responseMessageBelowArrow true
skinparam maxMessageSize 200

title 第6步：收集测试结果详细调用栈

participant "ScenarioRunner" as Runner
participant "ResultCollector" as Collector
participant "ResultTransporter" as Transporter
participant "ResultAnalyzer" as Analyzer
participant "ResultReporter" as Reporter
participant "NodeManager" as NodeMgr
participant "文件系统" as FS

Runner -> Runner: _collect_distributed_results()
activate Runner
note right Runner: 从scenario_result.metrics获取\ntest_execution_result

Runner -> Collector: collect_scenario_results(scenario, scenario_result, test_execution_result, mode)
activate Collector

== 6.1 创建结果目录结构 ==
Collector -> Collector: _create_result_directory_structure(timestamp, scenario_name)
Collector -> FS: 创建 results/{timestamp}/{scenario_name}/
FS -> FS: 创建子目录: artifacts/, logs/, metadata/, reports/
FS --> Collector: 目录结构创建完成

== 6.2 获取参与节点 ==
Collector -> Collector: _get_participating_nodes(scenario)
note right Collector: 优先使用scenario.metadata.services中的节点映射\n回退到所有启用节点

== 6.3 收集测试artifacts ==
alt test_execution_result存在且有artifacts
    Collector -> Transporter: collect_artifacts_from_nodes(artifacts, nodes, result_dir)
    activate Transporter
    loop 遍历每个节点
        Transporter -> NodeMgr: 从节点收集artifact文件
        NodeMgr --> Transporter: 文件内容
        Transporter -> FS: 保存到本地artifacts/目录
    end
    Transporter --> Collector: artifacts_summary
    deactivate Transporter
    Collector -> Collector: 更新collection_summary统计
end

== 6.4 根据模式收集额外信息 ==
alt mode == STANDARD 或 COMPREHENSIVE
    Collector -> Transporter: collect_service_logs(nodes, result_dir, collection_summary)
    activate Transporter
    Transporter -> NodeMgr: 收集Docker服务日志
    NodeMgr --> Transporter: 服务日志
    Transporter -> FS: 保存到logs/目录
    Transporter --> Collector: 更新collection_summary
    deactivate Transporter
end

alt mode == COMPREHENSIVE
    Collector -> Transporter: collect_system_logs(nodes, result_dir, collection_summary)
    activate Transporter
    Transporter -> NodeMgr: 收集系统日志
    NodeMgr --> Transporter: 系统日志
    Transporter -> FS: 保存到logs/目录
    Transporter --> Collector: 更新collection_summary
    deactivate Transporter
end

== 6.5 保存元数据 ==
Collector -> Analyzer: save_metadata(scenario, scenario_result, collection_summary, result_dir)
activate Analyzer
Analyzer -> FS: 保存scenario元数据到metadata/
Analyzer -> FS: 保存scenario_result到metadata/
Analyzer -> FS: 保存collection_summary到metadata/
Analyzer --> Collector: 元数据保存完成
deactivate Analyzer

== 6.6 生成结果摘要 ==
Collector -> Analyzer: generate_result_summary_from_collection(scenario_name, timestamp, scenario_result, collection_summary)
activate Analyzer
Analyzer -> Analyzer: 分析收集的数据
Analyzer --> Collector: ResultSummary对象
deactivate Analyzer

== 6.7 保存摘要 ==
Collector -> Reporter: save_result_summary(result_dir, summary)
activate Reporter
Reporter -> FS: 保存result_summary.json
Reporter --> Collector: 摘要保存完成

== 6.8 生成报告 ==
Reporter -> Reporter: generate_reports_v2(result_dir, summary, collection_summary)
Reporter -> FS: 生成Markdown报告
Reporter -> FS: 生成其他格式报告
Reporter --> Collector: 报告生成完成
deactivate Reporter

Collector -> Collector: 更新任务状态为completed
Collector --> Runner: ResultSummary
deactivate Collector

Runner -> Runner: 将结果信息添加到scenario_result.metrics['result_collection']
Runner --> Runner: 结果收集完成
deactivate Runner

@enduml

@startuml 收集模式选择逻辑
!theme plain

title 结果收集模式选择逻辑

start

:开始选择收集模式;

if (场景级别配置存在?) then (是)
    :使用scenario.metadata.test_execution.collection_mode;
    if (配置值有效?) then (是)
        :返回配置的模式;
        stop
    else (否)
        :记录警告，继续下一步;
    endif
endif

if (全局配置存在?) then (是)
    :使用scenario_manager.execution_config.default_collection_mode;
    if (配置值有效?) then (是)
        :返回全局配置的模式;
        stop
    else (否)
        :记录警告，继续下一步;
    endif
endif

if (场景有服务配置?) then (是)
    :计算服务数量;
    if (服务数量 >= 3?) then (是)
        :返回 COMPREHENSIVE 模式;
        stop
    elseif (服务数量 >= 1?) then (是)
        :返回 STANDARD 模式;
        stop
    endif
endif

:返回默认的 STANDARD 模式;
stop

@enduml

@startuml 三种执行方式对比
!theme plain
skinparam responseMessageBelowArrow true

title 三种执行方式在第6步的差异对比

participant "run --all" as All
participant "run base_test" as BaseTest
participant "run memory_opt" as MemoryOpt
participant "结果收集流程" as Collection

== 执行前差异 ==
All -> All: 遍历所有启用场景
BaseTest -> BaseTest: 加载单个场景: base_test
MemoryOpt -> MemoryOpt: 加载单个场景: memory_opt

== 第6步：结果收集（完全相同） ==
All -> Collection: _collect_distributed_results(base_test场景)
BaseTest -> Collection: _collect_distributed_results(base_test场景)
MemoryOpt -> Collection: _collect_distributed_results(memory_opt场景)

note over Collection: 所有三种方式在第6步的调用栈完全相同：\n1. collect_scenario_results()\n2. _create_result_directory_structure()\n3. collect_artifacts_from_nodes()\n4. collect_service_logs() / collect_system_logs()\n5. save_metadata()\n6. generate_result_summary_from_collection()\n7. save_result_summary()\n8. generate_reports_v2()

Collection --> All: ResultSummary
Collection --> BaseTest: ResultSummary
Collection --> MemoryOpt: ResultSummary

== 执行后差异 ==
All -> All: 继续处理下一个场景\n最终汇总所有场景结果
BaseTest -> BaseTest: 包装单场景结果\n返回ExecutionResult
MemoryOpt -> MemoryOpt: 包装单场景结果\n返回ExecutionResult

@enduml