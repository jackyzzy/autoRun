# 测试场景配置文件模板
# 定义场景执行顺序、过滤规则等
# 使用时请复制此文件到 config/scenarios.yaml 并修改为实际配置

# 场景执行配置
execution:
  # 场景根目录（可通过命令行参数覆盖）
  scenarios_root: "config/scenarios"
  
  # 场景执行模式
  # auto: 自动发现场景目录，按数字前缀排序
  # directory: 严格按目录名排序
  # custom: 使用下面的custom_order自定义顺序
  execution_mode: "custom"
  
  # 自定义执行顺序（仅在execution_mode为custom时生效）
  custom_order:
    - name: "baseline_test"
      directory: "001_baseline"
      enabled: true
      description: "基线性能测试 - 默认配置下的性能基准"

    - name: "memory_optimization"
      directory: "002_memory_opt"
      enabled: true
      description: "内存优化配置测试 - 测试内存优化对性能的影响"
      
    - name: "gpu_scaling"
      directory: "003_gpu_scale"
      enabled: false
      description: "GPU扩展测试 - 测试多GPU配置下的性能表现"
      
    - name: "concurrent_load"
      directory: "004_concurrent"
      enabled: false
      description: "并发负载测试 - 高并发场景下的性能测试"
      
    - name: "large_model_test"
      directory: "005_large_model"
      enabled: false
      description: "大模型测试 - 测试超大模型的推理性能"
      
    - name: "batch_processing"
      directory: "006_batch"
      enabled: false
      description: "批处理测试 - 批量请求处理性能测试"

# 场景过滤配置
filters:
  # 只执行包含这些标签的场景（为空则不过滤）
  include_tags: []
  # 排除包含这些标签的场景
  exclude_tags: ["experimental", "deprecated"]
  
  # 只执行指定的场景（为空则执行所有enabled场景）
  only_scenarios: []
  # 跳过指定的场景
  skip_scenarios: []

# 场景间配置
inter_scenario:
  # 场景间等待时间（秒）
  wait_between_scenarios: 120
  # 场景失败后是否继续执行后续场景
  continue_on_failure: true
  # 场景失败时的重试次数
  retry_count: 1
  # 重试间隔（秒）
  retry_interval: 300

# 🚀 并发执行配置 - 控制服务部署和健康检查的并发行为
execution_config:
  # 🎯 并发部署配置 - 基于依赖关系的智能并发部署
  concurrent_deployment:
    # 批次内最大并发服务数
    # 📖 说明：同一依赖批次内可以同时部署的最大服务数量
    # 📊 工作原理：系统会根据depends_on关系将服务分批，同批次内的服务可以并发部署
    # ⚙️  范围：1-20，推荐值：3-8（根据硬件资源调整）
    # 🔧 特殊值：设置为1完全禁用并发部署，改为串行模式
    # 💡 调优建议：
    #    - 高性能环境：8-12（充足CPU/内存/网络）
    #    - 普通环境：3-6（平衡性能和稳定性）
    #    - 受限环境：1-2（避免资源竞争）
    max_concurrent_services: 5

    # 健康检查最大并发数
    # 📖 说明：同时进行健康检查的最大服务数量
    # ⚙️  范围：1-50，推荐值：5-15
    # 🚀 效果：并发健康检查可显著减少总体等待时间
    # 💡 建议：通常可以设置为max_concurrent_services的2-3倍
    max_concurrent_health_checks: 10

    # 批次部署超时时间（秒）
    # 📖 说明：单个服务从开始部署到完全就绪的最大等待时间
    # 📦 包括：Docker拉取镜像 + 容器启动 + 应用初始化 + 健康检查
    # ⚙️  范围：60-3600秒，推荐值：300-900
    # 🔧 调优建议：
    #    - 大型模型服务：600-1800秒
    #    - 普通Web服务：120-300秒
    #    - 轻量级服务：60-120秒
    deployment_timeout: 600

    # 健康检查超时时间（秒）
    # 📖 说明：单个服务健康检查的最大等待时间
    # ⚙️  范围：30-1800秒，推荐值：120-600
    # ⚠️  注意：应小于deployment_timeout，建议为其50%-80%
    # 🏥 包括：HTTP端点检查 + Docker状态检查 + 自定义检查
    health_check_timeout: 300

  # 🔄 重试策略配置 - 智能错误恢复机制
  retry_strategy:
    # 场景级重试次数（兼容现有行为）
    # 📖 说明：整个场景失败后的重试次数
    # ⚙️  范围：0-5次，推荐值：1-2
    # 🎯 适用场景：网络波动、临时资源不足等系统性问题
    scenario_level_retries: 1

    # 服务级重试次数（智能重试机制）
    # 📖 说明：单个服务部署失败时的重试次数
    # ⚙️  范围：0-10次，推荐值：1-3
    # ✨ 特性：只重试失败的服务，已成功的服务保持运行
    # 🎯 适用场景：服务启动失败、健康检查超时等个别服务问题
    service_level_retries: 2

    # 重试间隔时间（秒）
    # 📖 说明：失败后等待多长时间开始重试
    # ⚙️  范围：5-300秒，推荐值：15-60
    # 🎯 用途：给系统时间恢复，避免立即重试加剧问题
    # 💡 建议：网络不稳定环境可适当增加到60-120秒
    retry_delay: 30

    # 是否只重试失败的服务（智能重试开关）
    # ✅ true：只重试失败的服务，已成功的服务保持运行（推荐）
    # ❌ false：重试整个批次，包括已成功的服务
    # 🎯 建议：保持为true以提高效率和减少资源浪费
    # 📊 性能影响：true模式可节省50%-80%的重试时间
    retry_only_failed: true

# 监控和日志配置
monitoring:
  # 是否启用详细日志
  verbose_logging: true
  # 是否为每个场景创建单独的日志文件
  separate_logs: true
  # 性能监控采样间隔（秒）
  performance_sampling_interval: 30

# 通知配置
notifications:
  # 是否启用通知
  enabled: false
  # 通知方式配置
  email:
    enabled: false
    smtp_server: "smtp.example.com"
    smtp_port: 587
    username: "${EMAIL_USERNAME}"
    password: "${EMAIL_PASSWORD}"
    from_address: "playbook@example.com"
    to_addresses: ["admin@example.com"]
  
  webhook:
    enabled: false
    url: "${WEBHOOK_URL}"
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer ${WEBHOOK_TOKEN}"

# 环境变量设置说明
# 如果启用通知功能，请设置以下环境变量：
# export EMAIL_USERNAME="your_email_username"
# export EMAIL_PASSWORD="your_email_password"
# export WEBHOOK_URL="https://your-webhook-url.com/notify"
# export WEBHOOK_TOKEN="your_webhook_token"